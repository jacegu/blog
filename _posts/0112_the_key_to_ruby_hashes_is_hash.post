en

2012-01-16 10:00:00+02:00

The key to Ruby hashes is eql? hash

I've been struggling for a few hours with key hashes in Ruby. We usually use primitive values as keys but what happens when we want to use one of our objects

%p Yesterday I spent a couple hours trying to resolve this little Ruby riddle:

%script{src: 'https://gist.github.com/1611803.js'}

%p
  I have been programming in Ruby for more than a year now. I have used the <code>Hash</code>
  class a myriad of times. But the thing is I've only used it with primitive values as keys.
  Usually a <code>String</code> or <code>Symbol</code>.

%p
  Yesterday I tried to use an instance of a class I just defined as a key of the hash.
  The first time, when calling the <code>has_key?</code> method I wasn't surprised. My
  Java past surfaced and <code>equals</code> pop into my mind. So I made the class
  <code>Comparable</code>.

%script{src: 'https://gist.github.com/1611811.js'}

%p
  As you may expect, the result was the same and I was starting to get really frustrated.  I
  implemented any other method of equality I counld think about. No results. I started hitting walls
  with my forehead and blaming the flue I currently have. I thought I was missing something
  obvious.

%p
  Once the wall started to crack I remembered having read something about hash keys in
  the Pragmatic Programmers
  %a{href: 'http://pragprog.com/book/ruby3/programming-ruby-1-9', target: '_blank', title: 'Pragmatic Programmers Programming Ruby 1.9'} Programming Ruby 1.9
  book. I went straight away to look it up and here is what I found:

%blockquote
  %p Hash keys must respond to the message <code>hash</code> by returning a hash code, and the hash code for a given key must not change. The keys used in hashes must also be comparable using <code>eql?</code>. If <code>eql?</code> returns <code>true</code> for two keys, then those keys must also have the same hash code. This means that certain classes (such as <code>Array</code> and <code>Hash</code>) canâ€™t conveniently be used as keys, because their hash values can change based on their contents.

  %cite Programming Ruby 1.9, Pragmatic Programmers

%p
  So the <code>hash</code> and <code>eql?</code>  methods were the little mistery
  and the key to solving the problem. (In Java, you also have the <code>hashCode</code>
  method besides <code>equals</code>, but I didn't remember it because Eclipse always
  generated it for me...)

%p
  All primitive types we normally use as hash keys <code>Integer</code>,
  <code>String</code> and <code>Symbol</code> have a proper implementation of these methods.
  When you don't define them they default to the ones in <code>Object</code> which
  are based on object identity. That's why <code>h.has_key? k1</code> returns <code>true</code>.

%script{src: 'https://gist.github.com/1611838.js'}

%p
  I added the methods and the quiz was solved but I'm still embarrassed and still feel like a Ruby beginner.
